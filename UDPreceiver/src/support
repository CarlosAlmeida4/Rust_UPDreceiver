use serialport;
use std::time::Duration;
use std::io::{self, Write};
use std::thread;


fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Serial port settings
    let port_name = "COM8";  // Change to your serial port name
    let baud_rate = 115_200;

    // Open the serial port
    let mut port = serialport::new(port_name, baud_rate)
        .timeout(Duration::from_secs(1))
        .open()?;
    println!("Connected to {}", port_name);
    let _dataterminal = port.write_data_terminal_ready(true);
    port.set_flow_control(serialport::FlowControl::Hardware).unwrap();

    // Clone the port handle for reading and writing
    let mut port_writer = port.try_clone()?;

   // Spawn a thread to handle reading from the serial port
   let reader_thread = thread::spawn(move || {
       let mut buffer: Vec<u8> = vec![0; 1024];
       loop {
           match port.read(buffer.as_mut_slice()) {
               Ok(bytes_read) if bytes_read > 0 => {
                   let received_data = &buffer[..bytes_read];
                   if let Ok(message) = std::str::from_utf8(received_data) {
                       println!("Received: {}", message);
                   } else {
                       println!("Received non-UTF8 data: {:?}", received_data);
                   }
               }
               Ok(_) => {
                println!("I didnt receive any data");
               }, // No data read, continue
               Err(e) if e.kind() == std::io::ErrorKind::TimedOut => continue,
               Err(e) => {
                   eprintln!("Error reading from port: {:?}", e);
                   break;
               }
           }
       }
   });

   // Handle writing to the serial port in the main thread
   let stdin = io::stdin();
   loop {
        let mut input = String::new();
        println!("Enter message to send (or type 'exit' to quit):");
        stdin.read_line(&mut input)?;

        let trimmed_input = input.trim();
        if trimmed_input.eq_ignore_ascii_case("exit") {
            println!("Exiting...");
               break;
        }
        // Append carriage return and send the AT command
        let command = format!("{}\r", trimmed_input);
       // Send the input to the serial port
       port_writer.write_all(command.as_bytes())?;
       println!("Sent: {}", trimmed_input);
   }

   // Wait for the reader thread to finish
   reader_thread.join().unwrap();

   Ok(())
}